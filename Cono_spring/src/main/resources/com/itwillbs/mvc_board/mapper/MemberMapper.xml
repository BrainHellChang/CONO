<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- mapper 태그 내에 namespace 속성 지정 후 Mapper 인터페이스 위치 지정 -->
<mapper namespace="com.itwillbs.mvc_board.mapper.MemberMapper">
	<!-- 실행할 SQL 구문을 태그 형식으로 작성(CRUD 작업에 해당하는 태그가 제공됨) -->
	<!-- 태그의 id 속성에 지정할 이름은 namespace 에서 지정한 인터페이스 내의 메서드명과 동일해야함 -->
	<!-- 태그 사이에 실제 SQL 구문을 작성 -->
	<!-- 만능문자 파라미터는 ? 대신 #{파라미터명} 형태로 지정(VO 객체의 변수명 활용) -->
	
	<!-- 1. 회원 가입 작업 수행을 위한 insert 태그 작성(id 는 MemberMapper 객체의 메서드명과 동일) -->
	<!-- 주의! 구문 내의 만능문자 사용 위치에 #{속성명} 지정 시 속성명은 VO 객체의 변수명과 동일 -->
	<insert id="insertMember">
		INSERT INTO member
		VALUES (null, #{name}, #{id}, #{passwd}, #{email}, #{gender}, now())
	</insert>
	
	<!-- 
	2. 로그인 작업 수행을 위한 select 태그 작성
	=> MemberMapper 객체의 checkMember() 메서드명을 id 속성값으로 지정
	=> 사용할 파라미터는 MemberVO 객체의 멤버변수명과 동일한 이름 지정
	=> 단, SELECT 태그는 조회 결과를 저장할 객체의 타입을 resultType 속성을 통해 지정
	   주로, VO 클래스명 지정(패키지명 포함)
	-->
	<select id="checkMember" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT * FROM member
		WHERE id=#{id} AND passwd=#{passwd}
	</select>
	
	<!-- 3. 회원 정보 조회 작업 수행을 위한 select 태그 작성 - selectMemberInfo -->
	<select id="selectMemberInfo" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT * FROM member
		WHERE id=#{id}
	</select>
	
	<!-- 4. 전체 회원 목록 조회 작업 수행을 위한 select 태그 - selectMemberList -->
	<!-- 전체 데이터에 대한 resultType 이 아닌 각각의 레코드에 대한 타입을 resultType 으로 설정 -->
	<!-- (조회된 레코드가 복수개일 경우 자동으로 List<MemberVO> 타입에 해당하는 객체 생성 후 저장) -->
	<select id="selectMemberList" resultType="com.itwillbs.mvc_board.vo.MemberVO">
		SELECT * FROM member
	</select>
</mapper>













